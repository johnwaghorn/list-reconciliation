import os
import re
from datetime import datetime

from lr_logging.exceptions import InvalidFilename


def validate_filename(filename: str, process_datetime: datetime = None) -> dict:
    """Validates a GP extract file name and file extension
        - GP ODS code and DOW filename is seperated by "_"
        - First filename group is the GP ODS code. Consisting on 1 alphabetical char, followed by 5 numerical chars
        - Second filename group is the autogenerated DOW file naming convention, containing HA cipher
        - Third filename group is the DOW extension, containing extract date

    Args:
        filename (str): GP extract filename
        process_datetime (datetime): Time of processing.

    Returns:
        dict: extract date, GP code and HA Cipher

    Raises:
        InvalidFilename: Raised when filename doesn't match correct format
    """

    filename = filename.upper()

    if filename and filename.endswith(".DAT"):
        filename = os.path.splitext(filename)[0]

    if len(filename) > 19:
        msg = ["Filename exceeds character limit"]
        raise InvalidFilename({"message": msg})

    valid_characters = re.match(r"^[A-Z0-9_.]{1,19}$", filename)

    if not valid_characters:
        msg = ["Filename contains invalid characters"]
        raise InvalidFilename({"message": msg})

    errors = []

    valid_practice_code = re.search(r"^([A-Z][0-9][0-9][0-9][0-9][0-9])", filename)

    if not valid_practice_code:
        errors.append("Filename contains invalid practice code")

    valid_download_name = re.search(r"GPR4([A-Z0-9]{3})1", filename)

    if not valid_download_name:
        errors.append("Filename contains invalid DOW name and/or HA cipher")

    valid_extension = re.search(r".([A-L][1-9A-V])[A-Z]$", filename)

    if not valid_extension:
        errors.append("Filename contains invalid extension")

    if errors:
        raise InvalidFilename({"message": errors})

    valid_filename = re.match(
        r"^[A-Z][0-9][0-9][0-9][0-9][0-9]_GPR4[A-Z0-9]{3}1.[A-L][1-9A-V][A-Z]$",
        filename,
    )

    if not valid_filename:
        msg = ["Filename does not have the correct format"]
        raise InvalidFilename({"message": msg})

    practice_code = valid_practice_code.group(1)
    ha_cipher = valid_download_name.group(1)
    extract_date = process_date(process_datetime, valid_extension.group(1))

    return {
        "filename": filename,
        "extract_date": extract_date,
        "practice_code": practice_code,
        "ha_cipher": ha_cipher,
    }


def process_date(process_datetime: datetime, date_indicator: str) -> datetime:
    """Processes a date from the file name.
        - Date must not exceed the current date
        - Date must not be older than 14 days
        - If current date is between Jan 1-15, treats indicator from Dec 18-31 as previous years

    Args:
        process_datetime (datetime): Time of processing.
        date_indicator (str): Date indicator in file extension

    Returns:
        datetime: Extract date created from file extension

    Raises:
        InvalidFilename: Raised when invalid dates contained within filename
    """

    months = "ABCDEFGHIJKL"
    month_code = date_indicator[0]
    extract_month = months.index(month_code) + 1

    days = "123456789ABCDEFGHIJKLMNOPQRSTUV"
    day_code = date_indicator[1]
    extract_day = days.index(day_code) + 1

    date_now = process_datetime or datetime.now()

    new_year_start_limit = datetime(date_now.year, 1, 1)
    new_year_end_limit = datetime(date_now.year, 1, 15)

    # If current date is between Jan 1-15, treats extract codes from Dec 18-31 as previous year
    if new_year_start_limit <= date_now < new_year_end_limit:
        if month_code == "L" and day_code in "IJKLMNOPQRSTUV":
            extract_date = datetime(date_now.year - 1, extract_month, extract_day)

    else:
        try:
            extract_date = datetime(date_now.year, extract_month, extract_day)

        except ValueError:
            msg = ["Filename contains invalid date"]
            raise InvalidFilename({"message": msg})

    days_difference = (date_now.date() - extract_date.date()).days

    if days_difference < 0:
        msg = ["File date must not be from the future"]
        raise InvalidFilename({"message": msg})

    elif days_difference > 14:
        msg = ["File date must not be older than 14 days"]
        raise InvalidFilename({"message": msg})

    return extract_date
